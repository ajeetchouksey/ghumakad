---
name: 'Terraform CI/CD'

'on':
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  WORKING_DIRECTORY: terraform

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Azure Login
        if: github.event_name != 'pull_request'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Format check result
            const fmtResult = '${{ steps.fmt.outcome }}' === 'success' ?
              '✅ Format check passed' : '❌ Format check failed';

            // Validation result
            const validateResult = '${{ steps.validate.outcome }}' ===
              'success' ? '✅ Validation passed' : '❌ Validation failed';

            // Plan result
            const planResult = '${{ steps.plan.outcome }}' === 'success' ?
              '✅ Plan generated successfully' : '❌ Plan failed';

            const output = `### Terraform CI Results

            ${fmtResult}
            ${validateResult}
            ${planResult}

            <details>
            <summary>Show Plan Output</summary>

            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Action triggered by @${{ github.actor }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Status Check
        if: >
          steps.fmt.outcome == 'failure' ||
          steps.validate.outcome == 'failure'
        run: exit 1
